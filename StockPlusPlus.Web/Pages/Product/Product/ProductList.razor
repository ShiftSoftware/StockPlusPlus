@attribute [Authorize]
@attribute [Route($"/{nameof(ProductList)}")]

@using StockPlusPlus.Shared.DTOs.Product.Product
@using System.Linq.Expressions;
@using StockPlusPlus.Web.Pages.Product.Brand;
@using StockPlusPlus.Web.Pages.Product.ProductCategory;

<ShiftList EntitySet="Product"
           Title="Product List"
           T="ProductListDTO"
           Dense
           Where="Where"
           ComponentType="typeof(ProductForm)"
           ShowIDColumn="true"
           TypeAuthAction="StockPlusPlus.Shared.ActionTrees.StockActionTrees.Product"
           AddDialogParameters="AddDialogParameters"
           EnableExport>
    <PropertyColumn Property="x => x.Name" Title="Name" />
    <ButtonColumn ComponentType="typeof(BrandForm)" KeyPropertyName="@nameof(ProductListDTO.BrandID)" Property="x => x.Brand" Title="Brand">
        <ButtonTemplate>
            <MudChip Style="cursor: pointer;" Icon="@Icons.Material.Filled.BrandingWatermark" Variant="Variant.Outlined">@context</MudChip>
        </ButtonTemplate>
    </ButtonColumn>
    <ButtonColumn ComponentType="typeof(ProductCategoryForm)" KeyPropertyName="@nameof(ProductListDTO.ProductCategoryID)" OpenMode="ModalOpenMode.NewTab" Property="x => x.Category" Title="Category" />
</ShiftList>

@code {

    public Dictionary<string, string> AddDialogParameters = new();

    [Parameter]
    [SupplyParameterFromQuery]
    public string? ProductCategoryID { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? BrandID { get; set; }

    public Expression<Func<ProductListDTO, bool>> Where = x => true;

    protected override void OnInitialized()
    {
        AddDialogParameters = new();

        if (!string.IsNullOrWhiteSpace(ProductCategoryID))
        {
            AddDialogParameters[nameof(ProductForm.ProductCategoryID)] = ProductCategoryID;

            Where = Where.AndAlso(x => x.ProductCategoryID == ProductCategoryID);
        }

        if (!string.IsNullOrWhiteSpace(BrandID))
        {
            AddDialogParameters[nameof(ProductForm.BrandID)] = BrandID;

            Where = Where.AndAlso(x => x.BrandID == BrandID);
        }
    }
}